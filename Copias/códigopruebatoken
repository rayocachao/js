/*
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const Usuario = require('./models/usuario');
const Temperatura = require('./models/temperatura');
const conversor = require('./public/conversor');
const port = 3000;
const path = require('path');
const express = require('express');
const app = express();

app.use(express.json());
app.use('/public', express.static(path.join(__dirname, 'public')));
app.use(cookieParser());

const ejs = require('ejs');
app.set('view engine', 'ejs');

const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({ extended: true }));

async function conectar() {
  try {
    await mongoose.connect('mongodb+srv://admin:Almi123@cluster0.m970ldu.mongodb.net/?retryWrites=true&', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('Conexión exitosa a la base de datos');

    const nuevoUsuario = new Usuario({
      nombre: 'Juan',
      apellido: 'Pérez',
      correoElectronico: 'juan.perez@example.com',
      nombreUsuario: 'juanperez',
      contrasena: await bcrypt.hash('contraseña123', 10)
    });

    await nuevoUsuario.save();
    console.log('Usuario guardado exitosamente:', nuevoUsuario);
  } catch (error) {
    console.error('Error al conectar con la base de datos:', error);
  }
}

conectar();

// Función de middleware para verificar el token de sesión
function verifySessionToken(req, res, next) {
  const sessionToken = req.cookies.sessionToken;
  if (!sessionToken) {
    return res.status(401).send('Acceso no autorizado');
  }

  jwt.verify(sessionToken, 'TU_CLAVE_SECRETA', (err, decoded) => {
    if (err) {
      return res.status(401).send('Acceso no autorizado');
    }

    req.userId = decoded.userId;
    next();
  });
}

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'html', 'logueo.html'));
});

app.post('/registro', async (req, res) => {
  const { nombre, apellido, correoElectronico, nombreUsuario, contrasena } = req.body;
  const nuevoUsuario = new Usuario({ nombre, apellido, correoElectronico, nombreUsuario, contrasena });

  try {
    await nuevoUsuario.save();
    res.send('Registro exitoso');
  } catch (err) {
    console.error(err);
    res.status(500).send(`Error en el registro: ${err.message}`);
  }
});

app.post('/login', async (req, res) => {
  const { nombreUsuario, contrasena } = req.body;

  try {
    const usuario = await Usuario.findOne({ nombreUsuario });

    if (usuario && await usuario.validarContrasena(contrasena)) {
      const sessionToken = jwt.sign({ userId: usuario._id }, 'TU_CLAVE_SECRETA');
      res.cookie('sessionToken', sessionToken, { httpOnly: true });
      res.redirect('/bienvenida');
    } else {
      res.status(401).send('Credenciales incorrectas');
    }
  } catch (err) {
    console.error(err);
    res.status(500).send('Error en el inicio de sesión');
  }
});

app.get('/bienvenida', verifySessionToken, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'html', 'bienvenida.html'));
});

app.get('/transmision', verifySessionToken, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'html', 'transmision.html'));
});

app.get('/conversor', verifySessionToken, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'html', 'conversor.html'));
});

app.get('/temperaturas', verifySessionToken, async (req, res) => {
  try {
    const temperaturas = await Temperatura.find().sort({ fecha: -1 });
    res.render('temperaturas', { temperaturas });
  } catch (err) {
    console.error(err);
    res.status(500).send('Error al obtener las temperaturas');
  }
});

app.listen(port, () => {
  console.log(`Servidor en ejecución en el puerto ${port}`);
}); */
